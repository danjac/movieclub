[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "movieclub"
requires-python = ">=3.12"
version = "0.1.0"
description = "Social movie reviews"
authors = [{name="Dan Jacob", email="danjac2018@gmail.com"}]
maintainers = [{name="Dan Jacob", email="danjac2018@gmail.com"}]
license = "ACSL"
readme = "README.md"
dependencies=[
  "attrs",
  "brotli",
  "dj-database-url",
  "django",
  "django-allauth",
  "django-anymail",
  "django-countries",
  "django-environ",
  "django-extensions",
  "django-health-check",
  "django-htmx",
  "django-invitations",
  "django-model-utils",
  "django-permissions-policy",
  "django-redis",
  "django-template-partials",
  "django-widget-tweaks",
  "gunicorn",
  "heroicons[django]",
  "hiredis",
  "httpx",
  "pillow",
  "psutil",
  "psycopg[binary]",
  "pycryptodome",
  "redis",
  "sentry-sdk",
  "setuptools",
  "whitenoise",
]


[project.optional-dependencies]
dev = [
  "bandit[toml]",
  "coverage[toml]",
  "django-browser-reload",
  "django-debug-toolbar",
  "django-fastdev",
  "djlint",
  "faker",
  "ipython",
  "mypy",
  "pytest",
  "pytest-cov",
  "pytest-django",
  "pytest-env",
  "pytest-mock",
  "pytest-mypy",
  "pytest-randomly",
  "pytest-sugar",
  "pytest-xdist",
  "ruff",
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE="movieclub.settings"
addopts = [
    "-v",
    "-x",
    "-p no:warnings",
    "--ff",
    "--mypy",
    "--cov",
    "--reuse-db",
    "--no-cov-on-fail",
    "--cov-fail-under=100",
    "--cov-report=term-missing",
    "--tb=short",
]
testpaths = "movieclub"
env = [
    "COVERAGE_CORE=sysmon",
    "TEMPLATE_DEBUG=true",
    "USE_COLLECTSTATIC=false",
    "USE_FASTDEV=true",
    "USE_HTTPS=false",
]

[tool.coverage.run]
source=["movieclub", "templates"]
omit=[
    "**/migrations/*",
    "*/nltk/*",
    "*/static/*",
    "*/tests/*",
    "*/asgi.py",
    "*/settings.py",
    "*/wsgi.py",
]


[tool.mypy]
python_version = "3.12"
check_untyped_defs = false
ignore_missing_imports = true
show_error_codes = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_unused_ignores = false
warn_redundant_casts = false
warn_unused_configs = false
warn_unreachable = true

[[tool.mypy.overrides]]
module="*.tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module="*.migrations.*"
ignore_errors = true

[tool.djlint]
profile = "django"
ignore = "H030,H031,H017,H021"

[tool.ruff]
target-version = "py312"

lint.select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "D10", # flake8-debugger
    "DJ", # flake8-django
    "E", # pycodestyle (error)
    "ERA", # eradicate
    "F", # pyflakes
    "FA", # flake8-future-annotations
    "FBT", # flake8-boolean-trap
    "G", # flake8-logging-format
    "I001", # isort
    "INP", # flake8-no-pep420
    "N", # pep8-naming
    "PIE", # flake8-pie
    "PT", # flake8-pytest-style
    "PGH", # pygrep hooks
    "PIE", # flake8-pie
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # ruff-specific
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "W", # pycodestyle (warning)
]
lint.ignore = [
    "D100",
    "D104",
    "D106",
    "D107",
    "D203",
    "D204",
    "D213",
    "D215",
    "D400",
    "D401",
    "D404",
    "D406",
    "D407",
    "D408",
    "D409",
    "D413",
    "E501",
    "E701",
    "Q000",
    "S101",
]
[tool.ruff.lint.per-file-ignores]
# ignore pydocstyle rules for tests and migrations
"**/conftest.py" = ["D101", "D102", "D103", "D105", "RUF"]
"**/apps.py" = ["D101", "D102", "D103", "D105", "RUF"]
"**/migrations/**.py" = ["D101", "D102", "D103", "D105", "E501", "N", "RUF"]
"**/tests/**.py" = ["D101", "D102", "D103", "D105", "RUF"]

[tool.ruff.lint.isort]
known-first-party = ["movieclub"]

[tool.pyright]
reportOptionalMemberAccess = false
reportGeneralTypeIssues = false
reportMissingTypeStubs = false
